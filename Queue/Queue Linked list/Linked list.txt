Write a Menu driven C program to accomplish the following functionalities in Queue using
Linked List:
e. Insert an element into the queue using a Linked List (Enqueue Operation).
f. Delete an element from the queue using a Linked List (Dequeue Operation).
g. Return the value of the FRONT element of the queue (without deleting it from the
queue) using a Linked List (Peep operation).
h. Display the elements of a queue using a Linked List.


#include <stdio.h>
#include <stdlib.h>

// Structure to represent a node in the linked list
struct Node {
    int data;
    struct Node* next;
};

// Structure to represent a queue
struct Queue {
    struct Node* front;
    struct Node* rear;
};

// Function to initialize an empty queue
void initializeQueue(struct Queue* queue) {
    queue->front = queue->rear = NULL;
}

// Function to check if the queue is empty
int isEmpty(struct Queue* queue) {
    return (queue->front == NULL);
}

// Function to insert an element into the queue (Enqueue Operation)
void enqueue(struct Queue* queue, int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = value;
    newNode->next = NULL;

    if (isEmpty(queue)) {
        queue->front = queue->rear = newNode;
    } else {
        queue->rear->next = newNode;
        queue->rear = newNode;
    }

    printf("Enqueued element: %d\n", value);
}

// Function to delete an element from the queue (Dequeue Operation)
void dequeue(struct Queue* queue) {
    if (isEmpty(queue)) {
        printf("Queue is empty. Cannot dequeue.\n");
    } else {
        struct Node* temp = queue->front;
        int removedValue = temp->data;

        queue->front = temp->next;
        free(temp);

        printf("Dequeued element: %d\n", removedValue);

        // If the queue becomes empty after dequeue
        if (queue->front == NULL) {
            queue->rear = NULL;
        }
    }
}

// Function to return the value of the FRONT element of the queue (Peek Operation)
void peek(struct Queue* queue) {
    if (isEmpty(queue)) {
        printf("Queue is empty. Cannot peek.\n");
    } else {
        printf("Front element: %d\n", queue->front->data);
    }
}

// Function to display the elements of the queue
void display(struct Queue* queue) {
    if (isEmpty(queue)) {
        printf("Queue is empty.\n");
    } else {
        struct Node* current = queue->front;
        printf("Queue elements: ");
        while (current != NULL) {
            printf("%d ", current->data);
            current = current->next;
        }
        printf("\n");
    }
}

int main() {
    struct Queue queue;
    initializeQueue(&queue);

    int choice, element;

    do {
        printf("\nMenu:\n");
        printf("1. Enqueue\n");
        printf("2. Dequeue\n");
        printf("3. Peek\n");
        printf("4. Display\n");
        printf("0. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter element to enqueue: ");
                scanf("%d", &element);
                enqueue(&queue, element);
                break;
            case 2:
                dequeue(&queue);
                break;
            case 3:
                peek(&queue);
                break;
            case 4:
                display(&queue);
                break;
            case 0:
                printf("Exiting program.\n");
                break;
            default:
                printf("Invalid choice. Please enter a valid option.\n");
        }

    } while (choice != 0);

    return 0;
}





