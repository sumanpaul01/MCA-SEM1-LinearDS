Write a Menu driven C program to accomplish the following functionalities in doubly
linked list.
a) Create a doubly linked list.
b) Display the elements of a doubly linked list.
c) Insert a node at the beginning of a doubly linked list.
d) Insert a node at the end of a doubly linked list.
e) Insert a node before a given node of a doubly linked list.
f) Insert a node after a given node of a doubly linked list.
g) Delete a node from the beginning of a doubly linked list.
h) Delete a node from the end of a doubly linked list.
i) Delete a node after a given node of a doubly linked list.
j) Delete the entire doubly linked list.



#include <stdio.h>
#include <stdlib.h>

// Define a doubly linked list node structure
struct Node {
    int data;
    struct Node* prev;
    struct Node* next;
};

// Function to create a new node
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    if (newNode == NULL) {
        printf("Memory allocation failed.\n");
        exit(1);
    }
    newNode->data = data;
    newNode->prev = NULL;
    newNode->next = NULL;
    return newNode;
}

// Function to display the elements of a doubly linked list
void displayList(struct Node* head) {
    printf("Doubly Linked List: ");
    while (head != NULL) {
        printf("%d -> ", head->data);
        head = head->next;
    }
    printf("NULL\n");
}

// Function to insert a node at the beginning of a doubly linked list
struct Node* insertAtBeginning(struct Node* head, int data) {
    struct Node* newNode = createNode(data);
    if (head == NULL) {
        return newNode;
    }
    newNode->next = head;
    head->prev = newNode;
    return newNode;
}

// Function to insert a node at the end of a doubly linked list
struct Node* insertAtEnd(struct Node* head, int data) {
    struct Node* newNode = createNode(data);
    if (head == NULL) {
        return newNode;
    }
    struct Node* temp = head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = newNode;
    newNode->prev = temp;
    return head;
}

// Function to insert a node before a given node in a doubly linked list
struct Node* insertBeforeNode(struct Node* head, int data, int targetData) {
    struct Node* newNode = createNode(data);
    if (head == NULL) {
        return newNode;
    }
    struct Node* temp = head;
    while (temp != NULL && temp->data != targetData) {
        temp = temp->next;
    }
    if (temp == NULL) {
        printf("Target node not found.\n");
        return head;
    }
    newNode->prev = temp->prev;
    newNode->next = temp;
    if (temp->prev != NULL) {
        temp->prev->next = newNode;
    } else {
        head = newNode;
    }
    temp->prev = newNode;
    return head;
}

// Function to insert a node after a given node in a doubly linked list
struct Node* insertAfterNode(struct Node* head, int data, int targetData) {
    struct Node* newNode = createNode(data);
    if (head == NULL) {
        return newNode;
    }
    struct Node* temp = head;
    while (temp != NULL && temp->data != targetData) {
        temp = temp->next;
    }
    if (temp == NULL) {
        printf("Target node not found.\n");
        return head;
    }
    newNode->prev = temp;
    newNode->next = temp->next;
    if (temp->next != NULL) {
        temp->next->prev = newNode;
    }
    temp->next = newNode;
    return head;
}

// Function to delete a node from the beginning of a doubly linked list
struct Node* deleteFromBeginning(struct Node* head) {
    if (head == NULL) {
        printf("List is empty. Cannot delete.\n");
        return NULL;
    }
    struct Node* temp = head;
    head = head->next;
    if (head != NULL) {
        head->prev = NULL;
    }
    free(temp);
    return head;
}

// Function to delete a node from the end of a doubly linked list
struct Node* deleteFromEnd(struct Node* head) {
    if (head == NULL) {
        printf("List is empty. Cannot delete.\n");
        return NULL;
    }
    struct Node* temp = head;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    if (temp->prev != NULL) {
        temp->prev->next = NULL;
    } else {
        head = NULL;
    }
    free(temp);
    return head;
}

// Function to delete a node after a given node in a doubly linked list
struct Node* deleteAfterNode(struct Node* head, int targetData) {
    if (head == NULL) {
        printf("List is empty. Cannot delete.\n");
        return NULL;
    }
    struct Node* temp = head;
    while (temp != NULL && temp->data != targetData) {
        temp = temp->next;
    }
    if (temp == NULL || temp->next == NULL) {
        printf("Target node or the node after it not found.\n");
        return head;
    }
    struct Node* nodeToDelete = temp->next;
    temp->next = nodeToDelete->next;
    if (nodeToDelete->next != NULL) {
        nodeToDelete->next->prev = temp;
    }
    free(nodeToDelete);
    return head;
}

// Function to delete the entire doubly linked list
void deleteList(struct Node* head) {
    while (head != NULL) {
        struct Node* temp = head;
        head = head->next;
        free(temp);
    }
}

int main() {
    struct Node* head = NULL;
    int choice, data, targetData;

    do {
        printf("\nMenu:\n");
        printf("1. Create a doubly linked list\n");
        printf("2. Display the elements of a doubly linked list\n");
        printf("3. Insert a node at the beginning\n");
        printf("4. Insert a node at the end\n");
        printf("5. Insert a node before a given node\n");
        printf("6. Insert a node after a given node\n");
        printf("7. Delete a node from the beginning\n");
        printf("8. Delete a node from the end\n");
        printf("9. Delete a node after a given node\n");
        printf("10. Delete the entire doubly linked list\n");
        printf("0. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter data for the first node: ");
                scanf("%d", &data);
                head = createNode(data);
                printf("Doubly linked list created successfully.\n");
                break;

            case 2:
                displayList(head);
                break;

            case 3:
                printf("Enter data for the new node: ");
                scanf("%d", &data);
                head = insertAtBeginning(head, data);
                printf("Node inserted at the beginning successfully.\n");
                break;

            case 4:
                printf("Enter data for the new node: ");
                scanf("%d", &data);
                head = insertAtEnd(head, data);
                printf("Node inserted at the end successfully.\n");
                break;

            case 5:
                printf("Enter data for the new node: ");
                scanf("%d", &data);
                printf("Enter data of the node before which the new node should be inserted: ");
                scanf("%d", &targetData);
                head = insertBeforeNode(head, data, targetData);
                printf("Node inserted before the given node successfully.\n");
                break;

            case 6:
                printf("Enter data for the new node: ");
                scanf("%d", &data);
                printf("Enter data of the node after which the new node should be inserted: ");
                scanf("%d", &targetData);
                head = insertAfterNode(head, data, targetData);
                printf("Node inserted after the given node successfully.\n");
                break;

            case 7:
                head = deleteFromBeginning(head);
                printf("Node deleted from the beginning successfully.\n");
                break;

            case 8:
                head = deleteFromEnd(head);
                printf("Node deleted from the end successfully.\n");
                break;

            case 9:
                printf("Enter data of the node after which the next node should be deleted: ");
                scanf("%d", &targetData);
                head = deleteAfterNode(head, targetData);
                printf("Node deleted after the given node successfully.\n");
                break;

            case 10:
                deleteList(head);
                printf("Doubly linked list deleted successfully.\n");
                break;

            case 0:
                printf("Exiting program.\n");
                deleteList(head); // Free memory before exiting
                break;

            default:
                printf("Invalid choice. Please try again.\n");
        }
    } while (choice != 0);

    return 0;
}



