Write a program to solve the tower of Hanoi problem using recursion.


#include <stdio.h>

// Function to move a disk from source peg to destination peg
void towerOfHanoi(int n, char source, char destination, char auxiliary) {
    if (n == 1) {
        printf("Move disk 1 from %c to %c\n", source, destination);
        return;
    }

    // Move n-1 disks from source to auxiliary peg using destination as the auxiliary peg
    towerOfHanoi(n - 1, source, auxiliary, destination);

    // Move the nth disk from source to destination peg
    printf("Move disk %d from %c to %c\n", n, source, destination);

    // Move the n-1 disks from auxiliary to destination peg using source as the auxiliary peg
    towerOfHanoi(n - 1, auxiliary, destination, source);
}

int main() {
    int n;

    // Get the number of disks from the user
    printf("Enter the number of disks: ");
    scanf("%d", &n);

    // Call the Tower of Hanoi function
    towerOfHanoi(n, 'A', 'C', 'B');

    return 0;
}


OUTPUT

Enter the number of disks: 3
Move disk 1 from A to C
Move disk 2 from A to B
Move disk 1 from C to B
Move disk 3 from A to C
Move disk 1 from B to A
Move disk 2 from B to C
Move disk 1 from A to C


The towerOfHanoi function is a recursive function that prints the steps to move n disks from the source peg to the destination peg using the auxiliary peg.
The main function takes user input for the number of disks and then calls the towerOfHanoi function with the source peg as 'A', destination peg as 'C', and auxiliary peg as 'B'.