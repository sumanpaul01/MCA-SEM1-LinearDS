Write a program to convert an infix expression into its equivalent prefix notation.


#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_SIZE 100

// Function to check if the character is an operator
int isOperator(char ch) {
    return (ch == '+' || ch == '-' || ch == '*' || ch == '/');
}

// Function to get the precedence of an operator
int getPrecedence(char op) {
    if (op == '+' || op == '-')
        return 1;
    else if (op == '*' || op == '/')
        return 2;
    return 0;
}

// Function to convert infix to prefix
void infixToPrefix(char infix[], char prefix[]) {
    int i, j = 0;
    int len = strlen(infix);

    // Reverse the infix expression
    for (i = len - 1; i >= 0; i--) {
        if (infix[i] == '(')
            infix[i] = ')';
        else if (infix[i] == ')')
            infix[i] = '(';

        prefix[j++] = infix[i];
    }
    prefix[j] = '\0';

    // Initialize a stack for operators
    char stack[MAX_SIZE];
    int top = -1;

    // Convert reversed infix to postfix
    for (i = 0; i < len; i++) {
        if (isOperator(prefix[i])) {
            while (top != -1 && getPrecedence(stack[top]) > getPrecedence(prefix[i])) {
                prefix[j++] = stack[top--];
            }
            stack[++top] = prefix[i];
        } else if (prefix[i] == '(') {
            stack[++top] = prefix[i];
        } else if (prefix[i] == ')') {
            while (top != -1 && stack[top] != '(') {
                prefix[j++] = stack[top--];
            }
            top--;  // Pop '('
        } else {
            prefix[j++] = prefix[i];
        }
    }

    // Pop remaining operators from the stack
    while (top != -1) {
        prefix[j++] = stack[top--];
    }

    // Reverse the final prefix expression
    for (i = 0; i < j / 2; i++) {
        char temp = prefix[i];
        prefix[i] = prefix[j - i - 1];
        prefix[j - i - 1] = temp;
    }

    prefix[j] = '\0';
}

int main() {
    char infix[MAX_SIZE];
    char prefix[MAX_SIZE];

    printf("Enter an infix expression: ");
    scanf("%s", infix);

    infixToPrefix(infix, prefix);

    printf("Prefix expression: %s\n", prefix);

    return 0;
}
