Write a Menu driven C program to accomplish the following functionalities in Stack using
Linked List:
a. Insert an element into the stack using a Linked List (Push Operation).
b. Delete an element from the stack using a Linked List (Pop Operation).
c. Return the value of the topmost element of the stack (without deleting it from the
stack) using a Linked List.
d. Display the elements of the stack using a Linked List.



#include <stdio.h>
#include <stdlib.h>

// Node structure for the linked list
struct Node {
    int data;
    struct Node* next;
};

// Function to create a new node
struct Node* createNode(int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = value;
    newNode->next = NULL;
    return newNode;
}

// Function to push an element onto the stack
void push(struct Node** top, int value) {
    struct Node* newNode = createNode(value);
    newNode->next = *top;
    *top = newNode;
    printf("%d pushed onto the stack.\n", value);
}

// Function to pop an element from the stack
void pop(struct Node** top) {
    if (*top == NULL) {
        printf("Stack underflow. Cannot pop from an empty stack.\n");
        return;
    }
    struct Node* temp = *top;
    *top = (*top)->next;
    printf("%d popped from the stack.\n", temp->data);
    free(temp);
}

// Function to peek at the topmost element of the stack
void peek(struct Node* top) {
    if (top == NULL) {
        printf("Stack is empty.\n");
        return;
    }
    printf("Top element of the stack: %d\n", top->data);
}

// Function to display the elements of the stack
void display(struct Node* top) {
    if (top == NULL) {
        printf("Stack is empty.\n");
        return;
    }
    printf("Elements of the stack:\n");
    while (top != NULL) {
        printf("%d\n", top->data);
        top = top->next;
    }
}

int main() {
    struct Node* top = NULL;
    int choice, value;

    do {
        printf("\n----- Menu -----\n");
        printf("1. Push\n");
        printf("2. Pop\n");
        printf("3. Peek\n");
        printf("4. Display\n");
        printf("5. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter the value to push onto the stack: ");
                scanf("%d", &value);
                push(&top, value);
                break;
            case 2:
                pop(&top);
                break;
            case 3:
                peek(top);
                break;
            case 4:
                display(top);
                break;
            case 5:
                printf("Exiting the program.\n");
                break;
            default:
                printf("Invalid choice. Please enter a valid option.\n");
        }
    } while (choice != 5);

    // Free the memory occupied by the remaining nodes in the stack
    while (top != NULL) {
        struct Node* temp = top;
        top = top->next;
        free(temp);
    }

    return 0;
}



OUTPUT

----- Menu -----
1. Push
2. Pop
3. Peek
4. Display
5. Exit
Enter your choice: 1
Enter the value to push onto the stack: 10
10 pushed onto the stack.

----- Menu -----
1. Push
2. Pop
3. Peek
4. Display
5. Exit
Enter your choice: 1
Enter the value to push onto the stack: 20
20 pushed onto the stack.

----- Menu -----
1. Push
2. Pop
3. Peek
4. Display
5. Exit
Enter your choice: 4
Elements of the stack:
20
10

----- Menu -----
1. Push
2. Pop
3. Peek
4. Display
5. Exit
Enter your choice: 3
Top element of the stack: 20

----- Menu -----
1. Push
2. Pop
3. Peek
4. Display
5. Exit
Enter your choice: 2
20 popped from the stack.

----- Menu -----
1. Push
2. Pop
3. Peek
4. Display
5. Exit
Enter your choice: 4
Elements of the stack:
10

----- Menu -----
1. Push
2. Pop
3. Peek
4. Display
5. Exit
Enter your choice: 5
Exiting the program.
